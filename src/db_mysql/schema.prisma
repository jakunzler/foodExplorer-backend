// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PermissionTypeGroup {
  USER
  USER_ADMIN
}

enum Roles {
  IS_ADMIN
  IS_SUPPORT
  IS_CLIENT
}

enum TelephoneType {
  HOME
  WORK
  MOBILE
}

enum DishStatus {
  AVAILABLE
  UNAVAILABLE
}

enum OrderStatus {
  PENDING_PAYMENT
  CONFIRMED_PAYMENT
  PREPARING
  DELIVERING
  DELIVERY_FAILED
  PICKUP_READY
  REFUNDED
  CONFIRMED_DELIVERY
  CONFIRMED_RECEIPT
  CANCELED
  COMPLETED
  ON_HOLD
}

model User {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  name           String
  email          String           @unique
  password       String
  isActive       Boolean          @default(true) @map("is_active")
  session        Session[]
  firstLogin     DateTime?        @map("first_login")
  telephone      Telephone[]
  message        Message[]
  avatar         String?
  birthday       DateTime?
  userRestaurant UserRestaurant[]
  orders         Order[]
  deletedBy      String?          @map("deleted_by")
  createdBy      String?          @map("created_by")
  Dish           Dish[]

  @@map("users")
}

model PermissionGroups {
  id        String                 @id @default(uuid())
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime               @updatedAt @map("updated_at")
  name      String                 @unique
  type      PermissionTypeGroup    @default(USER)
  users     UserPermissionGroups[]
  role      Roles                  @default(IS_CLIENT)

  @@unique([type, role])
  @@map("permission_groups")
}

model UserPermissionGroups {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now()) @map("created_at")
  deletedAt         DateTime?        @map("deleted_at")
  userId            String?          @map("user_id")
  permissionGroup   PermissionGroups @relation(fields: [permissionGroupId], references: [id])
  permissionGroupId String           @map("permission_group_id")

  @@unique([userId, permissionGroupId])
  @@map("user_permission_groups")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  ip        String
  userAgent String?  @map("user_agent")
  country   String?
  region    String?
  language  String?
  latitude  Float?
  longitude Float?

  @@map("sessions")
}

model Telephone {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  type      TelephoneType
  number    String
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @map("user_id")

  @@map("telephones")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isRead    Boolean  @default(false) @map("is_read")
  title     String
  content   String?
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("message")
}

model UserRestaurant {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @map("user_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @map("restaurant_id")

  @@map("user_restaurants")
}

model Restaurant {
  id                     String           @id @default(uuid())
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @updatedAt @map("updated_at")
  name                   String
  cnpj                   String           @unique
  address                Address[]
  energyConsumption      String?          @map("energy_consumption")
  airConditioners        String?          @map("air_conditioners")
  computers              String?          @map("computers")
  employeeTransportation String?          @map("employee_transportation")
  mainActivity           String?          @map("main_activity")
  suppliers              String?          @map("suppliers")
  wasteGeneration        String?          @map("waste_generation")
  userRestaurant         UserRestaurant[]
  orders                 Order[]
  isActive               Boolean          @default(true) @map("is_active")
  deletedBy              String?          @map("deleted_by")
  createdBy              String?          @map("created_by")
  Dish                   Dish[]

  @@map("restaurants")
}

model Address {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  street       String
  number       String
  complement   String?
  sector       String
  city         String
  state        String
  country      String
  zipCode      String     @map("zip_code")
  latitude     Float?
  longitude    Float?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @map("restaurant_id")
  Order        Order[]

  @@unique([restaurantId], name: "restaurant_address_unique")
  @@map("addresses")
}

model Dish {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @map("user_id")
  year         Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String      @map("restaurant_id")
  name         String
  status       DishStatus
  isActive     Boolean     @default(true) @map("is_active")
  notes        Note[]
  deletedBy    String?     @map("deleted_by")
  createdBy    String?     @map("created_by")
  DishOrder    DishOrder[]

  @@map("dishes")
}

model Note {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String
  dish      Dish     @relation(fields: [dishId], references: [id])
  dishId    String   @map("dish_id")
  isActive  Boolean  @default(true) @map("is_active")
  deletedBy String?  @map("deleted_by")
  createdBy String?  @map("created_by")

  @@map("notes")
}

model Order {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  status          OrderStatus @default(PENDING_PAYMENT)
  totalAmount     Float
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id])
  restaurantId    String      @map("restaurant_id")
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  dishes          DishOrder[]
  deliveryAddress Address?    @relation(fields: [addressId], references: [id])
  addressId       String?
}

model DishOrder {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  orderId     String   @map("order_id")
  order       Order    @relation(fields: [orderId], references: [id])
  dishId      String   @map("dish_id")
  dish        Dish     @relation(fields: [dishId], references: [id])
  quantity    Int
  totalAmount Float
}
